#!/bin/bash


#Raspi-LTSP
#Pi_LTSP
#Version 0.02
#UpdateLoc = "https://raw.github.com/gbaman/RaspberryPi-LTSP/master/UPDATE"

#Written by gbaman1, based off the fantastic work by vagrantc and alksig from the LTSP community
#Initial guide available at http://cascadia.debian.net/trenza/Documentation/raspberrypi-ltsp-howto/
#Spindle was used to figure out needed changes to generate Raspbian image https://github.com/asb/spindle

VariablesSetup() {
#Configures the global variables for PiLTSP.
if [ -e "/opt/ltsp/.nbd" ]; then
	NBD=$(head -n 1 /opt/ltsp/.nbd)
	if [ -e "/opt/ltsp/.nbdUse" ]; then
		NBDuse=$(head -n 1 /opt/ltsp/.nbdUse)
	else
		echo "false" > /opt/ltsp/.nbdUse
		VariablesSetup
	fi
	if [ -e "/opt/ltsp/.NBDBuildNeeded" ]; then
		NBDBuildNeeded=$(head -n 1 /opt/ltsp/.NBDBuildNeeded)
	else
		echo "false" > /opt/ltsp/.NBDBuildNeeded
		VariablesSetup
	fi
else
	mkdir /opt/ltsp/
	echo "false" > /opt/ltsp/.nbd
	VariablesSetup
fi
} 

SetVar(){
echo "$2" > "/opt/ltsp/.$1"
VariablesSetup

}

installLTSP() {
#Installs main packages required by LTSP
apt-get update && apt-get upgrade -y

apt-get install -y ltsp-server qemu-user-static binfmt-support ldm-server sed git gnome-control-center nfs-kernel-server
exitstatus=$?
if ! [ $exitstatus = 0 ]; then
	whiptail --title "ERROR!" --msgbox "No internet connection detected or other software is already being installed! Please wait 5-10 minutes and try again or connect to the internet " 10 78
	exit 1
fi
	
}



buildClient() {
#Creates the custom config file needed to build Raspbian and grabs keychain. Then starts the build

wget http://archive.raspbian.org/raspbian.public.key -O - | gpg --import
gpg --export 90FDDD2E >> /etc/ltsp/raspbian.public.key.gpg

rm /etc/ltsp/ltsp-raspbian.conf

cat <<EOF > /etc/ltsp/ltsp-raspbian.conf
DEBOOTSTRAP_KEYRING=/etc/ltsp/raspbian.public.key.gpg
DIST=wheezy
# For alternate raspbian mirrors, see: http://www.raspbian.org/RaspbianMirrors
MIRROR=http://mirrordirector.raspbian.org/raspbian
SECURITY_MIRROR=none
UPDATES_MIRROR=none
LOCALE="$LANG UTF-8"
KERNEL_PACKAGES=linux-image-3.10-3-rpi
EOF

VENDOR=Debian ltsp-build-client --arch armhf --config /etc/ltsp/ltsp-raspbian.conf
}



OneTimeFixes(){
#A number of one off fixes needed to be run

echo "/opt/ltsp *(ro,no_root_squash,async,no_subtree_check)" >> /etc/exports #sets up OS exporting for NFS
echo "/home   *(rw,sync,no_subtree_check)" >> /etc/exports #Sets up home folder exporting for NFS

mkdir /etc/skel/handin
mkdir /opt/ltsp/raspiLTSP #Config file storage folders
mkdir /opt/ltsp/raspiLTSP/temp

echo '#!/bin/sh' >> /etc/network/if-up.d/tftpd-hpa      #Script to make sure tftpd-hpa autostarts
echo "service tftpd-hpa restart" >> /etc/network/if-up.d/tftpd-hpa
chmod 755 /etc/network/if-up.d/tftpd-hpa
service tftpd-hpa restart
groupadd pupil
groupadd teacher

}



groupUpdate(){   #Outdates now
#Adds users to groups required for the system.

cut -d: -f1,3 /etc/passwd | egrep ':[0-9]{4}$' | cut -d: -f1 | while IFS= read -r user    #Get all non system users
do
        echo "$user"
        if groups "$user" | grep -q -E ' $1(\s|$)'; then
    		echo "True"
		else
    		#echo false
    		usermod -a -G $1 $user     #Add user to the group
fi
done
}



configFixes() {
#Configuration file changes required after the client is built. These are not once off as they reside inside the Raspberry Pi OS

sed -i -e 's,/bin/plymouth quit --retain-splash.*,/bin/plymouth quit --retain-splash || true,g' /opt/ltsp/armhf/etc/init.d/ltsp-client-core
echo 'LTSP_FATCLIENT=true' >> /opt/ltsp/armhf/etc/lts.conf
echo 'NFS_HOME=/home' >> /opt/ltsp/armhf/etc/lts.conf

cp '/opt/ltsp/armhf/etc/lts.conf' /var/lib/tftpboot/ltsp/armhf/lts.conf


printf 'snd-bcm2835\n' >> /etc/modules

cat <<\EOF1 > /etc/asound.conf
pcm.mmap0 {
    type mmap_emul;
    slave {
      pcm "hw:0,0";
    }
}

pcm.!default {
  type plug;
  slave {
    pcm mmap0;
  }
}
EOF1

#ltsp-chroot --arch armhf apt-get install -y lxde idle idle3 python-dev python3-dev scratch
}



ipAddress() {  #If 0 is passed, ask if they have internet, if
#Function for setting the IP address inside SD card image.

#echo "$1"
if [ $1 -eq 0 ]; then
whiptail --title "Internet" --yesno "Do you currently have internet access?" 8 78
rm -rf ~/piBoot
exitstatus=$?
	if [ $exitstatus = 0 ]; then
    	rm -rf ~/Downloads/piBoot
		git clone --depth 1 https://github.com/gbaman/RaspberryPi-LTSP.git ~/Downloads/piBoot #Clones main repository, including boot files
		#cp ~/Downloads/piBoot
	fi
else
	rm -rf ~/Downloads/piBoot
	git clone --depth 1 https://github.com/gbaman/RaspberryPi-LTSP.git ~/Downloads/piBoot #Clones main repository, including boot files
	#cp ~/Downloads/piBoot

fi

IP=`ifconfig  | grep 'inet addr:'| grep -v '127.0.0.1' | cut -d: -f2 | awk '{ print $1}'`; #Get the current main IP address

whiptail --title "Ip address" --yesno "Is this your planned server IP address? - "$IP 8 78 #Check with this use that the IP address is correct
 
exitstatus=$?
if [ $exitstatus = 0 ]; then
    echo " "
else
    echo " "
	IP=$(whiptail --inputbox "Please enter IP address" 8 78 $IP --title "IP address" 3>&1 1>&2 2>&3)
	exitstatus=$?
	if [ $exitstatus = 0 ]; then
    	echo "User selected Ok and entered " $IP
	fi
	fi
if [ "$NBD" = "true" ]; then   #If NBD is enabled, us the NBD config file, if not, use NFS config file
	rm ~/Downloads/piBoot/boot/cmdline.txt
	cp ~/Downloads/piBoot/boot/cmdlineNBD.txt ~/Downloads/piBoot/boot/cmdline.txt
else
	rm ~/Downloads/piBoot/boot/cmdline.txt
	cp ~/Downloads/piBoot/boot/cmdlineNFS.txt ~/Downloads/piBoot/boot/cmdline.txt
fi

service nfs-kernel-server restart   #Restart the NFS kernel, just in case
if [ "$SUDO_USER" = "" ]; then
        cp -r ~/Downloads/piBoot/boot/ ~/piBoot
        sudo sed -i 's/1.1.1.1/'$IP'/g' ~/piBoot/cmdline.txt
else
        cp -r ~/Downloads/piBoot/boot/ "/home/$SUDO_USER/piBoot"
        chown "$SUDO_USER" "/home/$SUDO_USER/piBoot"
        sudo sed -i 's/1.1.1.1/'$IP'/g' "/home/$SUDO_USER/piBoot/cmdline.txt"
fi


}


EnableNBDswap(){
#Enables NBD swap system. Allows the Raspberry Pis to use NBD partition as swap

rm /etc/nbd-server/conf.d/swap.conf
cat <<EOF > /etc/nbd-server/conf.d/swap.conf
[swap]
exportname = /tmp/nbd-swap/%s
prerun = nbdswapd %s
postrun = rm -f %s
EOF
service nbd-server restart

}


FixRepo() {
#Adds the repositories used by Raspbian. They public keys are included

rm -rf /opt/ltsp/armhf/etc/apt/sources.list.d/raspi.list
echo "deb http://archive.raspberrypi.org/debian/ wheezy main" > /opt/ltsp/armhf/etc/apt/sources.list.d/raspi.list
ltsp-chroot --arch armhf apt-key add - <<EOF1
-----BEGIN PGP PUBLIC KEY BLOCK-----
Version: GnuPG v1.4.12 (GNU/Linux)

mQENBE/d7o8BCACrwqQacGJfn3tnMzGui6mv2lLxYbsOuy/+U4rqMmGEuo3h9m92
30E2EtypsoWczkBretzLUCFv+VUOxaA6sV9+puTqYGhhQZFuKUWcG7orf7QbZRuu
TxsEUepW5lg7MExmAu1JJzqM0kMQX8fVyWVDkjchZ/is4q3BPOUCJbUJOsE+kK/6
8kW6nWdhwSAjfDh06bA5wvoXNjYoDdnSZyVdcYCPEJXEg5jfF/+nmiFKMZBraHwn
eQsepr7rBXxNcEvDlSOPal11fg90KXpy7Umre1UcAZYJdQeWcHu7X5uoJx/MG5J8
ic6CwYmDaShIFa92f8qmFcna05+lppk76fsnABEBAAG0IFJhc3BiZXJyeSBQaSBB
cmNoaXZlIFNpZ25pbmcgS2V5iQE4BBMBAgAiBQJP3e6PAhsDBgsJCAcDAgYVCAIJ
CgsEFgIDAQIeAQIXgAAKCRCCsSmSf6MwPk6vB/9pePB3IukU9WC9Bammh3mpQTvL
OifbkzHkmAYxzjfK6D2I8pT0xMxy949+ThzJ7uL60p6T/32ED9DR3LHIMXZvKtuc
mQnSiNDX03E2p7lIP/htoxW2hDP2n8cdlNdt0M9IjaWBppsbO7IrDppG2B1aRLni
uD7v8bHRL2mKTtIDLX42Enl8aLAkJYgNWpZyPkDyOqamjijarIWjGEPCkaURF7g4
d44HvYhpbLMOrz1m6N5Bzoa5+nq3lmifeiWKxioFXU+Hy5bhtAM6ljVb59hbD2ra
X4+3LXC9oox2flmQnyqwoyfZqVgSQa0B41qEQo8t1bz6Q1Ti7fbMLThmbRHiuQEN
BE/d7o8BCADNlVtBZU63fm79SjHh5AEKFs0C3kwa0mOhp9oas/haDggmhiXdzeD3
49JWz9ZTx+vlTq0s+I+nIR1a+q+GL+hxYt4HhxoA6vlDMegVfvZKzqTX9Nr2VqQa
S4Kz3W5ULv81tw3WowK6i0L7pqDmvDqgm73mMbbxfHD0SyTt8+fk7qX6Ag2pZ4a9
ZdJGxvASkh0McGpbYJhk1WYD+eh4fqH3IaeJi6xtNoRdc5YXuzILnp+KaJyPE5CR
qUY5JibOD3qR7zDjP0ueP93jLqmoKltCdN5+yYEExtSwz5lXniiYOJp8LWFCgv5h
m8aYXkcJS1xVV9Ltno23YvX5edw9QY4hABEBAAGJAR8EGAECAAkFAk/d7o8CGwwA
CgkQgrEpkn+jMD5Figf/dIC1qtDMTbu5IsI5uZPX63xydaExQNYf98cq5H2fWF6O
yVR7ERzA2w33hI0yZQrqO6pU9SRnHRxCFvGv6y+mXXXMRcmjZG7GiD6tQWeN/3wb
EbAn5cg6CJ/Lk/BI4iRRfBX07LbYULCohlGkwBOkRo10T+Ld4vCCnBftCh5x2OtZ
TOWRULxP36y2PLGVNF+q9pho98qx+RIxvpofQM/842ZycjPJvzgVQsW4LT91KYAE
4TVf6JjwUM6HZDoiNcX6d7zOhNfQihXTsniZZ6rky287htsWVDNkqOi5T3oTxWUo
m++/7s3K3L0zWopdhMVcgg6Nt9gcjzqN1c0gy55L/g==
=mNSj
-----END PGP PUBLIC KEY BLOCK-----
EOF1

rm -rf /opt/ltsp/armhf/etc/apt/sources.list.d/collabora.list
echo "deb http://raspberrypi.collabora.com wheezy rpi" > /opt/ltsp/armhf/etc/apt/sources.list.d/collabora.list
ltsp-chroot --arch armhf apt-key add - <<EOF1
-----BEGIN PGP PUBLIC KEY BLOCK-----
Version: GnuPG v1.4.13 (GNU/Linux)

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
HXWu9eprthyEIX6pmEhqzMViFix7FVozfdn2H4U=
=zyWt
-----END PGP PUBLIC KEY BLOCK-----
EOF1


echo "deb http://repository.wolfram.com/raspbian/ stable non-free" > /opt/ltsp/armhf/etc/apt/sources.list.d/wolfram.list
ltsp-chroot --arch armhf apt-key add - <<EOF1
-----BEGIN PGP PUBLIC KEY BLOCK-----
Version: GnuPG v2.0.14 (GNU/Linux)

mQINBFKKfy0BEADCh62+PSYjoIAgdHIpskDcwY5ccoHIc4sWFJIDOarBlvHf7w0x
XcURm8TbCCMlCGH6zpyBhGAERY6J7GbidBBQ/MGpv3YbyBAyDtlj6IFuzVQYVOzI
L262YugG6iqf+u+YQ4V9EknCLqoMXGAedCnigC7tVQTJtUHAdEcWWNXPVGSrjLVP
nU3gFPJlKKGThK1jt0ejT3QSZJh25X6wnK/cYs8UF9ub5HyzhsyER3ncbzdPCEBQ
tfWslS2vquUKba1fivO5DJhWhD3Tebytkm339OSYno3k7gcX2Xeb8oZl2XoaUaeo
zZFYyiF9hj2RiSl0rP+VBNiZyeinmLsvvN6RdZCxotWp5JeNm+uB1bYR+68BtDet
4y92fCEotHsWQDAnRmL4nyQS2SPhSZUljeL6B/8D3ho1i3gtLS4hEOfYAU9UvMMU
S+VAoHFlpX8CNeFCsHKeFpSqISfbzo6OR2yUpZID/BGfF9+rN5rzNtp1RsA/medr
4KPEiePGY3zBr4H0KTbBE4quVQiZoPWOV1DCxPow9N2V2mR5f3c1XXbr5Ldrymx9
bmFpWcNbK0ODEOFFirUKjyJT7ZZr1ai9RUQDqfm1qlOjtRJQuwCH7qegvOLL7Tzc
MQRQa21uIgefqoY7/7Nopi33I+gnIVF6TYAp+3JxAVWCQY+Yw7GBaCW/twARAQAB
tFVXb2xmcmFtIFJlc2VhcmNoLCBJbmMuIChXb2xmcmFtRW5naW5lIFJhc3BiZXJ5
IFBpIHNpZ25pbmcga2V5KSA8cmFzcGJpYW5Ad29sZnJhbS5jb20+iQI4BBMBAgAi
BQJSin8tAhsDBgsJCAcDAgYVCAIJCgsEFgIDAQIeAQIXgAAKCRBXT6dOXLtCIlkx
D/4iHq/peQ2Esl/ThCOo2aCBaSF/6NCcgGt0lc4Ju3pVGsCljpxrloOZKw4Pyq3j
f0LrYB9zi5YFDop02cejiNAg4KwpmY6TzS8n3p4rWtO6pa9U9OrZdrc1+VzIYlBj
OWsjjOXF311TMRvYbjZTvx0CbXz27T4AeZEzvqoHsJqjcDURHRgXdcoOcB6Gme85
or5Ht+C+mqzDhkJZIFux+MCj7S9hDutsuydcr9ZpzfPU/poL/GGQVUsZKS6CGZ9F
PDB28CYUK34Qzbf/g0rhlpeD+ui4JbiEyNeUkl/oPiFZbuYP9LVw4p2Iuhqc/a3L
jy9Qhh0FaLqfsVe89uPeJmYB9dPgHlO97gye7LAvz/GB8kNPky/sVacPYhlID3YG
R5ysiX7xMVgCUMI3v7ecBcSYmrSOGtOD2ZuW3jPIhl6DGN7+MQwhErNryB62LyPf
8c2PmQ+2B7gQK326NaWX25BS9JinFCtXk/NmCMVj+eckigQ1DmTG4rges9Q4LmDL
fsQKUHwDnzlU3G+NdSSQt9CyQnhFmviu2Mehzro4s4/i8FakZz6qrB/pL13ezbcm
MWg3gCdLiMK+jC+kFeP68yOLEbF5MSQJMPNDCZr9CJOUxMK1V9RwwhxbjBOcGnLP
VS7hKUeRKsJDKozRK+ge3vHdFpcDq1U3THdWwVw5p6zgFQ==
=SweU
-----END PGP PUBLIC KEY BLOCK-----
EOF1

ltsp-chroot --arch armhf debconf-set-selections <<SELEOF
wolfram-engine shared/accepted-wolfram-eula boolean true
SELEOF
#Auto accepts wolfram eula

echo deb http://mirrordirector.raspbian.org/raspbian/ wheezy main contrib non-free rpi > /opt/ltsp/armhf/etc/apt/sources.list
#Adds the repos to apt-get

ltsp-chroot --arch armhf apt-get update
#Fetches most recent package lists

}

InstallProgram() {
#Installing custom programs into the chroot
INSTALLP=$(whiptail --inputbox "What program would you like to install?" 8 78 $INIT --title "You can enter multiple programs by leaving a space between each" 3>&1 1>&2 2>&3)
 
exitstatus=$?

clear
echo "------------------------------------------------------"
echo "Am about to try and install " $INSTALLP
echo "Are you sure? y or n"
echo "------------------------------------------------------"
read RESULT
if [ "$RESULT" = "y" ]; then
	echo "Updating software lists"
	echo ""
	ltsp-chroot --arch armhf apt-get update
	ltsp-chroot --arch armhf apt-get -y install $INSTALLP
	if [ $? -eq 0 ]; then
		SetVar NBDBuildNeeded true
		echo "-----------------------------"
		echo $INSTALLP " was installed correctly"
		echo "-----------------------------"
		sleep 4
	else
		echo "-----------------------------"
		echo "ERROR"
		echo $INSTALLP " was NOT installed correctly    Read error above"
		echo "-----------------------------"
		sleep 8
	fi
fi
	

}


Finished() {
#Function performing any actions that should happen after the boot image has been created
whiptail --title "Install complete" --msgbox "The client install is complete, a boot.img file has been placed in /root folder, write this to an sd card" 16 78


}


RaspiTheme(){
#Grabs a copy of the custom Raspberry Pi login screen and applies it

rm -rf RaspberryPi-LTSP
git clone --depth 1 https://github.com/gbaman/RaspberryPi-LTSP.git
cp -r RaspberryPi-LTSP/themes/raspi /opt/ltsp/armhf/usr/share/ldm/themes/raspi
rm /opt/ltsp/armhf/etc/alternatives/ldm-theme
ln -s /usr/share/ldm/themes/raspi /opt/ltsp/armhf/etc/alternatives/ldm-theme
rm -rf RaspberryPi-LTSP
cp /opt/ltsp/armhf/usr/share/ldm/themes/raspi/bg.png /opt/ltsp/armhf/usr/share/images/desktop-base/raspi-LTSP.png
sudo ltsp-chroot --arch armhf update-alternatives --install /usr/share/images/desktop-base/desktop-background desktop-background /usr/share/images/desktop-base/raspi-LTSP.png 100



}

NBDRun() {
#Checks if it should be auto NBD compressing or not, if it should be, it recompresses the image
VariablesSetup
if [ "$NBD" = "true" ]; then  #If NBD is enabled on the system overall
	if [ "$NBDuse" = "true" ]; then  #If temporarily NBD is disable
		echo "--------------------------------------------------------"
		echo "Compressing the image, this will take roughly 5 minutes"
		echo "--------------------------------------------------------"
		ltsp-update-image /opt/ltsp/armhf  #If NBD is enabled, recompress the image
		SetVar NBDBuildNeeded false
	else
		whiptail --title "WARNING" --msgbox "Auto NBD compressing is disabled, for your changes to push to the Raspberry Pis, run NBD-recompress from main menu" 8 78
	fi
fi
}

NBDSetup() {
#Setup function for NBD, asks user if they wish to use it, if not it defaults to NFS

whiptail --title "Network technology" --yesno  "2 network technologies are available for Raspi-LTSP. NBD and NFS. NBD uses compression dramatically improving application loading times. The tradeoff though is after every modification to the operating system, the image must be recompressed which can take around 5 minutes. NFS is slower but does not need compressed, all changes run live. If in doubt, select NBD." --yes-button "NBD" --no-button "NFS" 11 78
 
exitstatus=$?
if [ $exitstatus = 0 ]; then
    EnableNBD
else
    echo "false" > /opt/ltsp/.nbd
    echo "false" > /opt/ltsp/.nbdUse
    echo "false" > /opt/ltsp/.NBDBuildNeeded
    VariablesSetup
fi
}

EnableNBD() {
	/usr/sbin/ltsp-update-image --config-nbd /opt/ltsp/armhf
    service nbd-server restart
    echo "true" > /opt/ltsp/.nbd
    echo "true" > /opt/ltsp/.nbdUse
    echo "false" > /opt/ltsp/.NBDBuildNeeded
    VariablesSetup

}

AddSoftware(){
#All the software not included in normal base Debian that has been added to Raspbian normally by Spindle

#------------------------------------------------------------------------------------------
#******************************************************************************************


# To add more software, just add it to the end of the list below taking a space after each program

ltsp-chroot --arch armhf apt-get install -y idle idle3 python-dev nano python3-dev scratch python3-tk git debian-reference-en dillo python python-pygame python-tk sudo pcmanfm chromium python3-numpy wget xpdf gtk2-engines alsa-utils wpagui omxplayer lxde net-tools
ltsp-chroot --arch armhf apt-get install -y ssh locales less fbset sudo psmisc strace module-init-tools ifplugd ed ncdu console-setup keyboard-configuration debconf-utils parted unzip build-essential manpages-dev python bash-completion gdb pkg-config python-rpi.gpio v4l-utils lua5.1 luajit hardlink ca-certificates curl fake-hwclock ntp nfs-common usbutils libraspberrypi-dev libraspberrypi-doc libfreetype6-dev
ltsp-chroot --arch armhf apt-get install -y python3-rpi.gpio python-rpi.gpio python-pip python-picamera python3-picamera x2x wolfram-engine xserver-xorg-video-fbturbo netsurf-common netsurf-gtk rpi-update
ltsp-chroot --arch armhf apt-get install -y ftp python3-pifacecommon python3-pifacedigitalio python3-pifacedigital-scratch-handler python-pifacecommon python-pifacedigitalio i2c-tools linux-image-rpi-rpfv man-db
ltsp-chroot --arch armhf apt-get install -y --no-install-recommends cifs-utils midori lxtask
#ltsp-chroot --arch armhf apt-get install -y raspi-copies-and-fills
#mv /etc/ld.so.preload /etc/ld.so.preload.disable 


ltsp-chroot apt-get install -y java-common oracle-java7-jdk apt-utils wpasupplicant wireless-tools firmware-atheros firmware-brcm80211 firmware-libertas firmware-ralink firmware-realtek


ltsp-chroot --arch armhf update-rc.d nfs-common disable
ltsp-chroot --arch armhf update-rc.d rpcbind disable

#Leave sonic-pi to end as it installs jackd2, which brings up dialog box
ltsp-chroot --arch armhf DEBIAN_FRONTEND=noninteractive apt-get install -y sonic-pi

ltsp-chroot --arch armhf apt-get install linux-image-3.12-1-rpi linux-image-3.10-3-rpi linux-image-3.2.0-4-rpi


#******************************************************************************************
#------------------------------------------------------------------------------------------

}


PiConfigFixes(){
#Configuration changes to Raspberry Pi files, mostly to do with LXDE instead of Raspbian itself

ltsp-chroot --arch armhf sed /etc/xdg/lxsession/LXDE/desktop.conf -i -e "s|sNet/ThemeName.*|sNet/ThemeName=Mist|"
ltsp-chroot --arch armhf sed /etc/xdg/openbox/LXDE/rc.xml -i -e \
"s|<drawContents>yes</drawContents>|<drawContents>no</drawContents>|"
ltsp-chroot --arch armhf apt-get install -y raspberrypi-artwork
ltsp-chroot --arch armhf update-alternatives --install /usr/share/images/desktop-base/desktop-background desktop-background /usr/share/raspberrypi-artwork/raspberry-pi-logo.png 100
ltsp-chroot --arch armhf PCMANFMCFG=/etc/xdg/pcmanfm/LXDE/pcmanfm.conf
ltsp-chroot --arch armhf sed "$PCMANFMCFG" -i -e 's/^wallpaper_mode.*/wallpaper_mode=3/'
ltsp-chroot --arch armhf sed "$PCMANFMCFG" -i -e 's/^desktop_bg.*/desktop_bg=#ffffff/'
ltsp-chroot --arch armhf sed "$PCMANFMCFG" -i -e 's/^su_cmd.*/su_cmd=gksu %s/'
}


EpoptesInstaller() {
#Installs Epoptes, classroom management software
whiptail --title "Install complete" --msgbox "Epoptes is classroom management for remote controlling and viewing everyone in the classes screen. You must enter a linux user" 16 78
INIT=Username
ADMIN=$(whiptail --inputbox "Please enter the admin account you wish to use with epoptes, this account can control other users." 8 78 $INIT --title "Epoptes Admin" 3>&1 1>&2 2>&3)
exitstatus=$?
if [ $exitstatus = 0 ]; then
	apt-get update
	apt-get install -y epoptes
    gpasswd -a $ADMIN epoptes  #Adds admin user to epoptes group.
    gpasswd -a root epoptes
    ltsp-chroot --arch armhf apt-get update
    ltsp-chroot --arch armhf apt-get install -y epoptes-client --no-install-recommends
    ltsp-chroot --arch armhf epoptes-client -c 
else
	echo "***** WARNING *****"
	echo ""
    echo "Epoptes not installed!"
    echo ""
    echo "***** WARNING *****"
    sleep 5
fi
}

EpoptesRun() {
#Runs epoptes using the supplied username
INIT=""
ADMIN=$(whiptail --inputbox "Please enter your eopotes username" 8 78 $INIT --title "Epoptes username" 3>&1 1>&2 2>&3)
exitstatus=$?
if [ $exitstatus = 0 ]; then
	su -c "epoptes &" $ADMIN > /dev/null 2>&1 &
fi
}

EpoptesAddAdmin(){
#Adds a new admin to epoptes
ADMIN=$(whiptail --inputbox "Please enter an admin account you wish to use with epoptes, this account can control other users." 8 78 $INIT --title "Epoptes Admin" 3>&1 1>&2 2>&3)
exitstatus=$?
if [ $exitstatus = 0 ]; then
	INIT=""
	usermod -a -G epoptes epoptes
else
	whiptail --title "Install complete" --msgbox "No admin user has been added" 16 78
fi
}


fixGroups(){
#Adds users to correct needed groups

for ugroup in adm dialout cdrom audio users sudo video games plugdev input pupil; do
	egrep -i "^$ugroup" /etc/group >> /dev/null
	if [ $? = 1 ]; then
		groupadd $ugroup
	fi
done

cut -d: -f1,3 /etc/passwd | egrep ':[0-9]{4}$' | cut -d: -f1 | while IFS= read -r user  #Gets
do
	for ugroup in adm dialout cdrom audio users video games plugdev input pupil; do
		if ! groups "$user" | grep -q -E ' $ugroup(\s|$)'; then
			usermod -a -G $ugroup $user
		fi
	done
done

}


#SetNetwork() {
#Setting up fixed IP address, WIP

#IP=$(/sbin/ip route | awk '/default/ { print $3 }') <br>
#echo $IP


#}

AddTeacher() {
#Adding users to "teachers" group
ADMIN=$(whiptail --inputbox "Please enter a new teacher user. Teacher users have access to the handin folder" 8 78 $INIT --title "Teacher" 3>&1 1>&2 2>&3)
exitstatus=$?
if [ $exitstatus = 0 ]; then
	INIT=""
	groupadd teachers
	usermod -a -G teachers $ADMIN
else
	whiptail --title "Failed" --msgbox "No teacher user was added" 16 78
fi

}


FtpSetup(){ #FTP system is no longer used
apt-get install -y vsftpd
sed -i 's/#write_enable=YES/''write_enable=YES''/g' /etc/vsftpd.conf
sed -i 's/#anon_upload_enable=YES/''anon_upload_enable=YES''/g' /etc/vsftpd.conf 
service vsftpd restart
mkdir -m 2733 /srv/ftp/handin
ln -s /svr/ftp/handin /home/ftp
chgrp teachers /srv/ftp/handin 

}

FixDesktopIcons(){
rm -rf /etc/skel/Desktop
cd /opt/ltsp/armhf/usr/share/applications
mkdir /etc/skel/Desktop
sudo cp -a scratch.desktop midori.desktop idle.desktop idle3.desktop lxterminal.desktop debian-reference-common.desktop wolfram-mathematica.desktop wolfram-language.desktop /etc/skel/Desktop
cd /etc/skel
wget "https://github.com/KenT2/python-games/tarball/master" -O python_games.tar.gz
tar -xvf python_games.tar.gz
mv KenT2-python-games* python_games
chmod +x python_games/launcher.sh
rm python_games.tar.gz
cd /etc/skel/Desktop
cat <<\EOF2 > python-games.desktop
[Desktop Entry]
Name=Python Games
Comment=From http://inventwithpython.com/pygame/
Exec=sh -c $HOME/python_games/launcher.sh
Icon=/usr/share/pixmaps/python.xpm
Terminal=false
Type=Application
Categories=Application;Games;
StartupNotify=true
EOF2

cut -d: -f1,3 /etc/passwd | egrep ':[0-9]{4}$' | cut -d: -f1 | while IFS= read -r user
do
        mkdir /home/$user/Desktop
        cd /home/$user/Desktop/
    	cp -R  /etc/skel/Desktop/* /home/$user/Desktop/
        chown -R "$user" *
        cp -R /etc/skel/python_games /home/$user/python_games

done


}

PiControlInstall(){ #No longer used, now includes a setup.py file
rm -rf Pi_Connector
git clone --depth 1 https://github.com/gbaman/Pi_Connector.git
cp Pi_Connector/Server/server.py /usr/local/bin/raspiServer
cp Pi_Connector/Server/piserver.sh /etc/init.d/piserver.sh
cp Pi_Connector/Client/textclient.py /opt/ltsp/armhf/usr/local/bin/raspiClient
cp Pi_Connector/Pi/picontrol.py /opt/ltsp/armhf/usr/local/bin/picontrol.py
cp Pi_Connector/Pi/picontrol.sh /etc/init.d/picontrol.sh
chmod 755 /opt/ltsp/armhf/usr/local/bin/picontrol.py
chmod 755 /opt/ltsp/armhf/usr/local/bin/raspiClient
chmod 755 /usr/local/bin/raspiServer
chmod 755 /opt/ltsp/armhf/etc/init.d/picontrol.sh
chmod 755 /etc/init.d/piserver.sh
echo "Picontrol installed!"

}

PiControlInstallNew(){
#Installs picontrol software using the new setup.py
rm -rf Pi_Connector
git clone --depth 1 https://github.com/gbaman/Pi_Connector.git
python Pi_Connector/setup.py ltsp full
}

CollectWork(){
#A work collection system. It grabs files from students "handin" folders, copies them to "submitted" folder on the server and changes their owner
INIT="$SUDO_USER"
USERHAND=$(whiptail --inputbox "Enter the username of the user account you want to save the collected work to. This is usually your own account name" 8 78 $INIT --title "User selection" 3>&1 1>&2 2>&3)
 
exitstatus=$?
if [ $exitstatus = 0 ]; then
    #echo "User selected Ok and entered " 

	whiptail --title "WARNING" --yesno "The current submitted folder will be deleted, are you sure?" 8 78
 
	exitstatus=$?
	if [ $exitstatus = 0 ]; then
		rm -rf /home/"$USERHAND"/submitted
		mkdir /home/"$USERHAND"/submitted
		exitstatus=$?
		if [ $exitstatus = 0 ]; then
			if [ "$USERHAND" != "" ]; then
			
			#if [ "$USERHAND" = "" ]; then
			#	whiptail --title "ERROR" --msgbox "The username must not be blank" 8 78
			#else
    			cut -d: -f1,3 /etc/passwd | egrep ':[0-9]{4}$' | cut -d: -f1 | while IFS= read -r user
				do
        			if groups "$user" | grep -q -E ' pupil(\s|$)'; then
        				if [ -d "/home/$user/handin" ]; then
							echo "The user $user has a handin folder"
							cp -r "/home/$user/handin/" "/home/$USERHAND/submitted/$user/"
					
						fi
				
                		else
                			echo "The user $user does not have a handin folder"

					fi
				done
				
				chown -R "$USERHAND" /home/"$USERHAND"/submitted
				whiptail --title "Complete" --msgbox "Students work has been collected and can be found in /home/$USERHAND/submitted/" 8 78
			else
			whiptail --title "ERROR" --msgbox "The username can't be blank!" 8 78
			fi
		else
			whiptail --title "ERROR" --msgbox "The user $USERHAND was not found!" 8 78
			
		fi
	fi
fi

}
CopyToUsers(){ #(Path-to-folder)
#Used to copy files out to every user, plus to the skel folder for new users

whiptail --title "WARNING" --yesno "This involves copying a folder to the users home folder, if it already exists should we delete it?" 8 78
local delete=$?
local filepath=$1
local filename=$(basename "$filepath")
cut -d: -f1,3 /etc/passwd | egrep ':[0-9]{4}$' | cut -d: -f1 | while IFS= read -r user
do
	if [ $delete = 0 ] ; then
		rm -rf "/home/$user/$filename"
	fi
		echo "$filename"
		echo "/home/$user/$filename"
		
		cp -r  "$filepath" "/home/$user/$filename"
		chown -R "$user" "/home/$user/$filename"

done
}

SudoMenu(){
#Used to enable Sudo on pupil accounts

whiptail --title "WARNING" --yesno 'Would you like to enable Sudo use for pupils? Giving pupils access to Sudo can be dangerous, they could do nasty things! But Sudo is required for GPIO use. It should only be enabled if needed. You can change your mind later the in Manage-Users submenu.' 10 78 
exitstatus=$?
if [ $exitstatus = 0 ]; then
	rm -f /opt/ltsp/armhf/etc/sudoers.d/01pupil
	touch /opt/ltsp/armhf/etc/sudoers.d/01pupil
	chmod 440 /opt/ltsp/armhf/etc/sudoers.d/01pupil
	echo '%pupil ALL=NOPASSWD: ALL' >> /opt/ltsp/armhf/etc/sudoers.d/01pupil
fi
}

FinishedInstallingSoftware(){
whiptail --title "Finished?" --yesno 'Are you finished installing software?' 10 78 
exitstatus=$?
if [ $exitstatus = 0 ]; then
	if [ "$NBDBuildNeeded" = "true" ]; then
		NBDRun
	fi
else
	ExtraSoftware
fi
	
}

fileSelect(){
results=$(whiptail --title "Current location $(pwd)"  --menu "Select a folder. To select this folder, select ./ and to go up a folder, select ../ " 20 80 10 `for x in $(ls -pa | grep "/"); do echo $x "-"; done` 2>&1 >/dev/tty)
exitstatus=$?
if [ "$exitstatus" = "1" ]; then
        echo "The user canceled :( "
        return "1"
else
        if [ "$results" = "./" ]; then
                location=$(pwd)
                echo "chosen location is $location"
        else
                cd "$results"
                fileSelect
        fi
fi

}

removeAnacronLines() {
sed --in-place '/RaspiLTSP.backup/d' /etc/anacrontab
sed --in-place '/RaspiLTSP.backup/d' /etc/anacrontab
sed --in-place '/RaspiLTSP.backup/d' /etc/anacrontab

}

createBackupScript(){
rm -rf /usr/local/bin/Raspi-LTSP-backup.sh

echo 'currentDate=`date +"%d-%m-%y"`
currentTime=`date +"%H_%M"`
if [ -e "/opt/ltsp/.backup" ]; then
        LOCATION=$(head -n 1 /opt/ltsp/.backup)
        if [ -d "$LOCATION" ]; then
        		find "$LOCATION" -name "*Raspi-Users-Backup.tar.gz" -ctime +"$DELETETIME" | xargs rm -rf
                tar -zcvf "$LOCATION$currentDate--$currentTime--Raspi-Users-Backup.tar.gz" /home
                #echo "$LOCATION$currentDate--Raspi-Users-Backup.tar.gz"
                exitstatus=$?
                if [ $exitstatus = 0 ]; then
                        logger -s "$currentDate $currentTime - Backup of users files was successful" 2>> /var/log/Raspi-backup.log
                else
                        logger -s "$currentDate $currentTime - Backup failed with tar errorcode $exitstatus" 2>> /var/log/Raspi-backup.log
                fi
        else
                logger -s "$currentDate $currentTime - Backup folder unavailable!" 2>> /var/log/Raspi-backup.log
        fi
else
        logger -s "$currentDate $currentTime - No backup location specified!" 2>> /var/log/Raspi-backup.log
fi' >> /usr/local/bin/Raspi-LTSP-backup.sh
chmod +x /usr/local/bin/Raspi-LTSP-backup.sh
}

AddUsers(){

	username=$(whiptail --inputbox "Enter new username" 8 78 $INIT --title "Username" 3>&1 1>&2 2>&3)
	exitstatus=$?
	if [ "$exitstatus" = "0" ]; then
		password=$(whiptail --inputbox "Enter new password" 8 78 $INIT --title "Password" 3>&1 1>&2 2>&3)
		exitstatus=$?
		if [ "$exitstatus" = "0" ]; then
			egrep "^$username" /etc/passwd >/dev/null
			if [ $? -eq 0 ]; then
				whiptail --title "Error" --msgbox "Username already exists!" 8 78
			else
				pass=$(perl -e 'print crypt($ARGV[0], "password")' $password)
				useradd -m -s /bin/bash -p $pass $username
			[ $? -eq 0 ] && echo "$username has been added to system!" || echo "Failed to add a user!"
			fixGroups
			fi
			whiptail --title "Another user" --yesno "Would you like to add another user?" 8 78
			if [ $? -eq 0 ]; then
				AddUsers
			fi
		fi
	fi
}

RemoveUser(){
	username=$(whiptail --inputbox "Enter the username to be removed" 8 78 $INIT --title "Username" 3>&1 1>&2 2>&3)
	if [ $? -eq 0 ]; then
		if ! [ "$username" = "" ]; then
			egrep "^$username" /etc/passwd >/dev/null
			if [ $? -eq 0 ]; then
					whiptail --title "Are you sure?" --yesno "Are you sure you want to delete $username and all $username's user files?" 8 78
					if [ $? -eq 0 ]; then
						deluser $username
						rm -rf "/home/$username"
						whiptail --title "Successful" --msgbox "User successfully removed" 8 78
					fi
			else
				whiptail --title "Error" --msgbox "Username does not exist!" 8 78
			fi
		else
			whiptail --title "Error" --msgbox "Username does not exist!" 8 78
		fi
	whiptail --title "Another user" --yesno "Would you like to delete another user?" 8 78
		if [ $? -eq 0 ]; then
			RemoveUser
		fi
	fi
	
}

ChangeUserPassword(){
	username=$(whiptail --inputbox "Enter the username to change password of" 8 78 $INIT --title "Username" 3>&1 1>&2 2>&3)
	if [ $? -eq 0 ]; then
		if ! [ "$username" = "" ]; then
			egrep "^$username" /etc/passwd >/dev/null
			if [ $? -eq 0 ]; then
				password=$(whiptail --inputbox "Enter the new password" 8 78 $INIT --title "Password" 3>&1 1>&2 2>&3)
				if ! [ "$password" = "" ]; then
					echo -e "$password\n$password" | passwd $username
					whiptail --title "Successful" --msgbox "Password successfully changed" 8 78
				else
					whiptail --title "Error" --msgbox "Password not valid" 8 78
				fi
			else
				whiptail --title "Error" --msgbox "Username does not exist!" 8 78
			fi
		else
			whiptail --title "Error" --msgbox "Username isn't valid" 8 78
		fi
		whiptail --title "Another user" --yesno "Would you like to change another users password?" 8 78
		if [ $? -eq 0 ]; then
			ChangeUserPassword
		fi
	fi				
			
}		

RestoreBackup() {
	whiptail --title "Select backup" --msgbox "Please select a backup file. They are normally the date, time followed by Raspi-Users-Backup.tar.gz" 8 78

}
TroubleShooter(){

	whiptail --title "Troubleshooter" --msgbox "Welcome to Raspi-LTSP troubleshooter. The troubleshooter goes over a few possible issues you may be having with your setup and offers advice.
	WARNING - This troubleshooter is experimental, feel free to open issue reports at https://github.com/gbaman/RaspberryPi-LTSP/issues if you have any additional issues." 16 78
	whiptail --title "Boot" --yesno "Have you got as far as your Raspberry Pi starting up?" 8 78
	if [ $? -eq 0 ]; then
		whiptail --title "Login screen" --yesno "Have you got as far as the login screen displaying?" 8 78
		if [ $? -eq 0 ]; then
			whiptail --title "Login screen" --yesno "Are you having login issues?" 8 78
			if [ $? -eq 0 ]; then
				whiptail --title "Login" --msgbox "LDM (login screen) does not handle incorrect passwords very well. If you enter an incorrect set of credentials, it just restarts itself. Don't worry about this.
				If you are unsure about your password, remember you can easily change it in the Manage-users submenu" 16 78
			else
				whiptail --title "???" --msgbox "I am not aware of any other issues in this area. Please create a support ticket at https://github.com/gbaman/RaspberryPi-LTSP/issues" 8 78
			fi
		else
			whiptail --title "Connection refused" --yesno "Are you getting connection refused or connection timed out error?" 8 78
			if [ $? -eq 0 ]; then
				IP=`ifconfig  | grep 'inet addr:'| grep -v '127.0.0.1' | cut -d: -f2 | awk '{ print $1}'`; #Get the current main IP address
				whiptail --title "Troubleshooter" --msgbox "This is a common error, it occurs when the IP address of the server on the SD card is incorrect. Insert the SD card into a computer and open the cmdline.txt file. Find NBDRoot= (or NFSRoot=) and make sure the address that follows it is $IP 
				If it isn't, change it so it is.
				If it is currently 1.1.1.1 the server was unable to get your current address when it created the SD card.
				If it is a different address, your server may have been assigned a new IP address. It would be a good idea to assign a static IP address to your server. Talk to your technician about this." 16 78
			
			else
				whiptail --title "Giving up" --yesno "Are you getting a number of 'giving up' errors?" 8 78
				if [ $? -eq 0 ]; then
					whiptail --title "Giving up" --msgbox "This usually means the Raspberry Pi isn't physically connected to the network, check the ethernet cable is correctly plugged in (wifi is not supported) and is connected to your main switch." 16 78
				else
					whiptail --title "???" --msgbox "I am not aware of any other issues in this area. Please create a support ticket at https://github.com/gbaman/RaspberryPi-LTSP/issues" 8 78		
				fi
			fi
		fi
	else
		whiptail --title "SD card" --yesno "Are you having issues with loading the files onto the SD card?" 8 78
		if [ $? -eq 0 ]; then
			whiptail --title "Partitions" --yesno "Are you having issues with there being 2-3 partitions on the SD card?" 8 78
			if [ $? -eq 0 ]; then
				whiptail --title "Formating partitions" --msgbox "When flashing Raspbian or another Raspberry Pi operating system onto SD cards, a number of partitions are created. Raspi-LTSP only needs a single partition, the boot partition.
				This is usually a small (~50mb) partition which is formatted as fat32. If you wish to format the entire SD card (which if you are having issues, you may want to), please refer to the userguide section on formatting SD cards. " 16 78	
			else
				whiptail --title "???" --msgbox "I am not aware of any other issues in this area. Please create a support ticket at https://github.com/gbaman/RaspberryPi-LTSP/issues" 8 78	
			fi
		else
			whiptail --title "???" --msgbox "I am not aware of any other issues in this area. Please create a support ticket at https://github.com/gbaman/RaspberryPi-LTSP/issues" 8 78
		fi
	fi
}



DisplayUsers(){
clear
echo "-------------------"
echo "Current Linux users"
echo "-------------------"
cut -d: -f1,3 /etc/passwd | egrep ':[0-9]{4}$' | cut -d: -f1 | while IFS= read -r user
	do
		echo "$user"
	done
echo "---------------"
echo "Press enter to continue"
read

}

#***************************************************************************************************
backupDeleteTime(){
  MENUEPT=$(whiptail --menu "How long would you like to store backups? Note this only runs when a backup runs." 20 85 10 \
    "Ten-Days" "Backups will be kept for 10 days then deleted" \
    "Thirty-Days" "Backups will be kept for 30 days then deleted" \
    "Ninety-Days" "Backups will be kept for 90 days then deleted" \
    "Forever" "I will delete my backups manually" \
    3>&1 1>&2 2>&3)

case "$MENUEPT" in
    Ten-Days) 
	DELETETIME=10
    ;;
    Thirty-Days)
    DELETETIME=30
    ;;
    Ninety-Days)
    DELETETIME=90
    ;;
    Forever)
    DELETETIME=9999
    ;;
    *)
    removeAnacronLines
    rm -rf /usr/local/bin/Raspi-LTSP-backup.sh
    Menu
    ;;

esac
}

	
#***************************************************************************************************
backupFrequency(){
  MENUEPT=$(whiptail --menu "How often should I create a backup?" 20 85 10 \
    "Every-day" "Will create a new backup every day" \
    "Twice-weekly" "Will create a backup on Tuesday and Thursday" \
    "Once-a-week" "Will create a backup every Friday" \
    3>&1 1>&2 2>&3)

case "$MENUEPT" in
    Every-day) 
    removeAnacronLines
    echo "1       15      RaspiLTSP.backup1      /bin/sh /usr/local/bin/Raspi-LTSP-backup.sh" >> /etc/anacrontab
	
    ;;
    Twice-weekly)
    removeAnacronLines 
    echo "3       15      RaspiLTSP.backup1      /bin/sh /usr/local/bin/Raspi-LTSP-backup.sh" >> /etc/anacrontab
    ;;
    Once-a-week)
    removeAnacronLines 
    echo "1       15      RaspiLTSP.backup1      /bin/sh /usr/local/bin/Raspi-LTSP-backup.sh" >> /etc/anacrontab
    ;;
    *)
    removeAnacronLines
    rm -rf /usr/local/bin/Raspi-LTSP-backup.sh
    Menu
    ;;

esac
}



#***************************************************************************************************
OtherMenu() {

  MENUEPT=$(whiptail --title "Other Submenu" --menu "What would you like to do?" 20 85 10 \
    "Network-technology" "Select your preferred network technology, NBD or NFS" \
    "NBD-recompress" "Force an NBD compress if changes are made outside Raspi-LTSP" \
    "NBD-compress-disable" "Disable auto NBD recompression after every change" \
    "NBD-compress-enable" "Enable auto NBD recompression after every change (default)" \
    3>&1 1>&2 2>&3)

#<<COMMENT1
#if [$MENUOPT -eq 0]; then
case "$MENUEPT" in
    Collect-work) 
    CollectWork
	Menu
    ;;
    Extra-software) 
    ExtraSoftware
    ;;
    NBD-compress-disable) 
    echo "false" > /opt/ltsp/.nbdUse
    VariablesSetup
    Menu
    ;;
    NBD-compress-enable) 
    echo "true" > /opt/ltsp/.nbdUse
    VariablesSetup
    Menu
    ;;
    Network-technology)
	NBDSetup
	ipAddress 0 
	whiptail --title "SD image updated" --msgbox "SD card image updated. Please copy the files found in /home/YourUser/piboot folder to the root of an SD card." 16 78
	Menu
	;;
	NBD-recompress)
	local CurrentNBD=$(head -n 1 /opt/ltsp/.nbdUse)
	echo "true" > /opt/ltsp/.nbdUse
	NBDRun
	echo "$CurrentNBD" > /opt/ltsp/.nbdUse
	VariablesSetup
	Menu
	;;
    *)
    Menu
    ;;

esac

} #***************************************************************************************************

EpoptesMenu() {

  MENUEPT=$(whiptail --title "Epoptes Submenu" --menu "What would you like to do?" 20 80 10 \
    "Install" "Install epoptes to server and pis" \
    "Epoptes-launch" "Launches epoptes, it must be installed first though" \
    "Epoptes-admin" "Add a new epoptes admin. Admins can control other clients" \
    "Remove-epoptes" "Uninstall epoptes from the pi clients" \
    3>&1 1>&2 2>&3)

#<<COMMENT1
#if [$MENUOPT -eq 0]; then
case "$MENUEPT" in
    Install) 
    EpoptesInstaller
    NBDRun
	Menu
    ;;
    Epoptes-launch)
    EpoptesRun
    Menu
    	;;
    Epoptes-admin)
    EpoptesAddAdmin
    Menu
    	;;
    Remove-epoptes)
	ltsp-chroot --arch armhf apt-get remove -y epoptes-client
    ltsp-chroot --arch armhf apt-get -y autoremove
    NBDRun
    whiptail --title "Epoptes" --msgbox "Epoptes has been removed from the pi image" 16 78
    Menu
    ;;
    *)
    Menu
    ;;

esac
#COMMENT1
}

#***************************************************************************************************
##### WIP ##########################
BackupMenu() {

  MENUEPT=$(whiptail --title "Backup Submenu" --menu "What would you like to do?" 20 80 10 \
    "Configure-backup" "Configure and enable backups. Also use to make changes" \
    "Disable-backup" "Disables backup daemon, old backups will not be deleted" \
    "Display-Logs" "Displays logs for the backup daemon, check these regularly!" \
    3>&1 1>&2 2>&3)

#<<COMMENT1
#if [$MENUOPT -eq 0]; then
case "$MENUEPT" in
    Configure-backup) 
    whiptail --title "Select Location" --msgbox 'Select the location where you wish to save the backups. An external hard drive is highly recommended! Even a large (16gb+) pendrive should be sufficient. In Linux external drives are attached in /media so you will start there. Do not save backups on the same hard drive as the /home folder!' 12 78
    cd /media
    fileSelect
    if [ "$location" = "1" ]; then
    	Menu
    else
    	rm -rf /opt/ltsp/.backup
    	echo "$location/" >> /opt/ltsp/.backup
    	backupFrequency
    	backupDeleteTime
    	createBackupScript
    	currentDate=`date +"%d-%m-%y"`
		currentTime=`date +"%H:%M"`
    	#echo "Hello $location $currentDate-$currentTime" >> /var/log/Raspi-backup.log
    	logger -s "$currentDate $currentTime - Backup configured. Folder chosen is $location" 2>> /var/log/Raspi-backup.log
    	whiptail --title "Backup setup" --msgbox 'The backup is now configured, the logs can be viewed at any time by checking /var/log/Raspi-backup.log' 12 78
    fi
	Menu
    ;;
    Disable-backup)
    rm -rf /usr/local/bin/Raspi-LTSP-backup.sh
    removeAnacronLines
    currentDate=`date +"%d-%m-%y"`
	currentTime=`date +"%H:%M"`
    logger -s "$currentDate $currentTime - Backup disabled from Raspi-LTSP" 2>> /var/log/Raspi-backup.log
    whiptail --title "Backup disabled" --msgbox 'The backup daemon has now been disabled, no more backups will be performed till it is enabled again with Configure-backup. All old backups have been kept.' 12 78
    Menu
    ;;
    Display-Logs)
    clear
    echo "-------------------"
    echo "Raspi-LTSP log file"
    echo "-------------------"
    echo " "
    echo "$(cat /var/log/Raspi-backup.log)"
    echo " "
    echo "Hit enter to continue"
    read 
    Menu
    ;;
    *)
    Menu
    ;;

esac

}

##### WIP ##########################

#***************************************************************************************************
UserGroups() {

  MENUEPT=$(whiptail --title "User-groups Submenu" --menu "What would you like to do?" 20 80 10 \
  	"Add-user" "Add a new Linux user" \
  	"Remove-user" "Remove a Linux user" \
  	"Change-password" "Change password of a user" \
  	"Display-users" "List all the users on the system" \
  	"Launch-graphical" "Launch a graphical user management panel" \
    "Add-teacher" "Add user to the teachers permission group" \
    "Enable-Sudo" "Enables the use of sudo for pupils. Used for GPIO access" \
    "Disable-Sudo" "Disables the use of sudo for pupils" \
    3>&1 1>&2 2>&3)

#<<COMMENT1
#if [$MENUOPT -eq 0]; then
case "$MENUEPT" in
	Add-user) 
    AddUsers
	Menu
    ;;
    Remove-user) 
    DisplayUsers
    RemoveUser
	Menu
    ;;
    Change-password) 
    DisplayUsers
    ChangeUserPassword
	Menu
    ;;
    Display-users) 
    DisplayUsers
	;;
    Launch-graphical) 
    su -c "gnome-control-center user-accounts &" > /dev/null 2>/dev/null
	Menu
    ;;
    Add-teacher) 
    AddTeacher
	Menu
    ;;
    Graphics-fix)
    fixGroups
    Menu
	;;
	Enable-Sudo)
    SudoMenu
    Menu
	;;
	Disable-Sudo)
    rm -f /opt/ltsp/armhf/etc/sudoers.d/01pupil
    Menu
	;;
    *)
    Menu
    ;;

esac
} #***************************************************************************************************

ExtraSoftware() {

  MENUEPT=$(whiptail --title "Extra Software Submenu" --cancel-button "Finished" --menu "What would you like to do?" 20 100 10 \
    "Install-Libreoffice" "Libreoffice is a full free office suite, similar to Microsoft office " \
    "Install-MinecraftPi" "Installs Minecraft Pi edition and Raspi2png (for screenshoting)" \
    "Install-Arduino" "Installs the Arduino IDE for use with Arduinos via USB" \
    "Install-Scratch-gpio" "Installs Scratch GPIO, a special version of scratch for GPIO work" \
    "Install-Python-hardware" "Installs python libraries for hardware board, e.g. pibrella" \
    "Install-Custom-package" "Allows you to enter the name of a package from Raspbian repository" \
    3>&1 1>&2 2>&3)

#<<COMMENT1
#if [$MENUOPT -eq 0]; then
case "$MENUEPT" in
    Install-Libreoffice) 
    ltsp-chroot --arch armhf apt-get -y install libreoffice
    SetVar NBDBuildNeeded true
    FinishedInstallingSoftware
    ;;
    Install-MinecraftPi)
    wget https://s3.amazonaws.com/assets.minecraft.net/pi/minecraft-pi-0.1.1.tar.gz -O /opt/ltsp/raspiLTSP/temp/minecraft.tar.gz
    tar -zxvf /opt/ltsp/raspiLTSP/temp/minecraft.tar.gz -C /opt/ltsp/raspiLTSP/temp/
    CopyToUsers /opt/ltsp/raspiLTSP/temp/mcpi
    cp -r /opt/ltsp/raspiLTSP/temp/mcpi /etc/skel/mcpi
    ltsp-chroot --arch armhf apt-get install libpng12-dev
    wget https://github.com/AndrewFromMelbourne/raspi2png/blob/master/raspi2png?raw=true -O /opt/ltsp/raspiLTSP/temp/raspi2png
    cp -r /opt/ltsp/raspiLTSP/temp/raspi2png /opt/ltsp/armhf/usr/local/bin/raspi2png
    chmod 755 /opt/ltsp/armhf/usr/local/bin/raspi2png
    SetVar NBDBuildNeeded true
    FinishedInstallingSoftware
	;;
	Install-Arduino) 
    ltsp-chroot --arch armhf apt-get -y install arduino
    SetVar NBDBuildNeeded true
    FinishedInstallingSoftware
    ;;
    Install-Scratch-gpio) 
    whiptail --title "Error" --infobox "ScratchGPIO installation support has not been added yet" 8 78
    echo "ScratchGPIO support has not been added yet"
    sleep 3
	ExtraSoftware
    ;;
    Install-Python-hardware) 
    ltsp-chroot --arch armhf pip install pibrella
    SetVar NBDBuildNeeded true
    FinishedInstallingSoftware
    ;;
    Install-Custom-package)
    InstallProgram
    
    FinishedInstallingSoftware
    ;;
    *)
    FinishedInstallingSoftware
    ;;

esac
}

#***************************************************************************************************



PiControlmenu() {

  MENUEPT=$(whiptail --title "Pi-Control Submenu" --menu "What would you like to do?" 20 80 10 \
    "Enable/update-Picontrol" "Enables or updates Pi-control " \
    "Disable-Picontrol" "Disables Pi-control" \
    3>&1 1>&2 2>&3)

#<<COMMENT1
#if [$MENUOPT -eq 0]; then
case "$MENUEPT" in
    Enable/update-Picontrol) 
    PiControlInstallNew
    NBDRun
    
	Menu
    ;;
    Disable-Picontrol)
    python Pi_Connector/setup.py ltsp remove
    NBDRun
    Menu
	;;
    *)
    Menu
    ;;

esac
}

#***************************************************************************************************

FullInstall(){
	whiptail --title "Full Install" --msgbox "A full install will take around 1-2 hours depending on your Internet speed. There will be a number of options to select at the end so do not close this terminal until the install has completed!" 10 78
	installLTSP   #Installs LTSP and other packages required to build an Raspberry Pi OS
	buildClient   #Creates config file to build Raspbian with LTSP and builds it
	OneTimeFixes   #Runs some one off config changes, these are not repeated at any time later
	#PiConfigFixes   #Adds configuration changes to LXDE and installs Raspi artwork
	configFixes   #Main configuration changes that are run on the the LTSP chroot (/opt/ltsp/armhf). These must be run every time the image is generated
	FixRepo   #Adds additional repositories to the Raspbian build
	AddSoftware   #Adds all the custom software on top of a normal Armhf Debian Wheezy build
	RaspiTheme   #Installs the Raspi-LTSP theme which can be seen at login
	FixDesktopIcons   #Adds desktop icons
	EnableNBDswap   #Enables NBD swap for if the Pi runs out of RAM, it can use server as RAM using NBD
	whiptail --title "Extra software" --msgbox "Select any additional software you want to use or use Install-Custom-software to install a specific package from the Raspbian apt repository if you know its name. To quit the menu, use the cancel option. This menu can be later accessed from Install-Program from the main menu." 12 78
	ExtraSoftware   #Runs ExtraSoftware menu to let the user select additional software they wish to install
	whiptail --title "Compression" --msgbox "The operating system will now be compressed. This normally takes around 5 minutes." 8 78
	EnableNBD   #Enables NBD compression
	ipAddress 1   #Runs the IP address selector and builds the SD card image
	#FtpSetup
	#AddTeacher
	SudoMenu   #Asks the user if they wish to enable Sudo for the pupils
	fixGroups   #Adds all current users to the pupil and video group
	whiptail --title "Installation complete" --msgbox "Raspi-LTSP installation is now complete. Please copy the files found in /home/YourUser/piboot to the root of an SD card. Then plug the Raspberry Pi into the network and boot it up." 10 78
}

Menu() {



  MENUOPT=$(whiptail --title "Raspi-LTSP Main Menu" --menu "What would you like to do?" 22 80 13 \
  	"Install-Program" "Install a new program on the Raspberry Pi's" \
    "Manage-Users" "Add new users, change passwords and delete users" \
    "Update-All" "Run an automatic update on server and Raspberry Pi image" \
    "Backup-Menu" "User files backup submenu" \
    "Collect-work" "Collects students work in a single folder" \
    "Change-IP" "Update or change the IP address of the server on SD card" \
    "Rebuild-OS" "Rebuilds the LTSP Raspberry Pi image from scratch again" \
    "Epoptes-Menu" "Epoptes classroom management submenu" \
    "Pi-control-Menu" "Pi-control classroom management submenu" \
    "Full-Install" "Full install of Raspi-LTSP server" \
    "Other" "Other options and utilities for management" \
    "Troubleshooter" "Having issues? Try running the troubleshooter" \
    "Update-Pi-LTSP" "Redownloads the Pi-LTSP script" \
    3>&1 1>&2 2>&3)

case "$MENUOPT" in 
    Full-Install)
    if [ -d /opt/ltsp/armhf ]; then
    	whiptail --title "Error" --yesno "An LTSP install has been detected.. Not recommended to continue. Should I continue?" 8 78
		exitstatus=$?
		if [ $exitstatus = 0 ]; then
    		echo "User selected Yes."
		else
    	#echo "User selected No."
    	Menu
		fi
	fi
    FullInstall
	Menu
    ;;
Change-IP)
	ipAddress 0
	whiptail --title "SD image updated" --msgbox "SD card image updated. Please copy the files found in /home/YourUser/piboot folder to the root of an SD card." 16 78
	Menu
	;;
Install-Program)
	ExtraSoftware
	Menu
	;;
Rebuild-OS)
	#echo rebuilding
	whiptail --title "About to delete entire client OS" --yesno "Are you sure? Users are not affected" 8 78
 
	exitstatus=$?
	if [ $exitstatus = 0 ]; then
    	rm -rf /opt/ltsp/armhf
    	rm -rf /var/lib/tftpboot/ltsp/armhf
    	buildClient
    	configFixes
    	FixRepo
    	AddSoftware
    	RaspiTheme
    	EnableNBDswap
    	whiptail --title "Extra software" --msgbox "Select any additional software you want to use or use Install-Custom-software to install a specific package from the Raspbian apt repository if you know its name. To quit the menu, use the cancel option. This menu can be later accessed from Install-Program from the main menu." 12 78
		ExtraSoftware
		whiptail --title "Compression" --msgbox "The operating system will now be compressed. This normally takes around 5 minutes." 8 78
    	EnableNBD
		ipAddress 1
		SudoMenu
		whiptail --title "Rebuild complete" --msgbox "Raspi-LTSP rebuild is now complete. Please copy the files found in /home/YourUser/piboot to the root of an SD card. Then plug the Raspberry Pi into the network and boot it up." 9 78
	fi
	Menu
	;;
Backup-Menu)
	whiptail --title "WARNING" --msgbox 'WARNING - The backup system in Raspi-LTSP is currently in alpha, you are responsible to check backups are correctly being made and checking the log file frequently. To check the log file, select Display-Logs in the Backup submenu!' 12 78
	BackupMenu
	;;	
Manage-Users)
	UserGroups
	Menu
	;;	
Install-Epoptes)
	EpoptesInstaller
	Menu
	;;
Update-All)
	apt-get update && apt-get upgrade -y
	ltsp-chroot --arch armhf apt-get update && apt-get upgrade -y
	#FtpSetup
	AddSoftware
	RaspiTheme
	NBDRun
	whiptail --title "Update complete" --msgbox "Updates are complete" 7 78
	Menu
	;;
Epoptes-Menu)
	EpoptesMenu
	;;
Pi-control-Menu)
	PiControlmenu
	;;
Collect-work) 
    CollectWork
	Menu
    ;;
Other)
	OtherMenu
	
	;;
Troubleshooter)
	TroubleShooter
	Menu
	;;
Update-Pi-LTSP)
	rm /home/$SUDO_USER/Pi_ltsp
	rm Pi_ltsp
	wget https://raw.github.com/gbaman/RaspberryPi-LTSP/master/Pi_ltsp -O /tmp/Pi_ltsp
	cp -f /tmp/Pi_ltsp "/home/$SUDO_USER/Pi_ltsp"
	cp -f /tmp/Pi_ltsp ~/Pi_ltsp
	rm -rf /tmp/Pi_ltsp
	exec /bin/bash Pi_ltsp
	exit
	;;
	*)
    exit
    ;;
	esac

#fi
} 



#***************************************************************************************************

if [ "$(id -u)" != "0" ]; then
   echo "This script must be run as root" 1>&2
   exit 1
fi

if [ ! "$BASH_VERSION" ] ; then
	whiptail --title "Shell error" --msgbox "Please do not run Raspi-LTSP with sudo sh $0. Please run it with bash using     sudo bash $0" 8 78
    echo "Please do not run Raspi-LTSP with sh $0. Please run it with bash using     sudo bash $0" 1>&2
    exit 1
fi

if [ -d /opt/ltsp/armhf ]; then
		fixGroups
else
    	whiptail --title "Welcome" --yesno "Welcome to Raspi-LTSP. We have detected Raspi-LTSP is not installed, would you like to run the full install?" 8 78
		exitstatus=$?
		if [ $exitstatus = 0 ]; then
    		FullInstall
		else
    		Menu
		fi
	fi

VariablesSetup

Menu

